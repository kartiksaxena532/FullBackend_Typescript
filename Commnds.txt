npm init 
npm install -D ts-node nodemon @types/node  ( D for dev dependencies typescripr ki node and the nodemon for running server continously)4
 dev dependencies ko hum sirf developemnet like type script mein use karte hai 
 baaki in prodeuction usko javascript mein transpile karte hai 
 
 ab humne ek cheez aur li hai jo hai ts-node isse ye hota hai ki typescript ka output dekhne 
 ke liye humko use javascript mein karna padega toh hum ts-node se directly output dekh sakte hai

 aur node ke types ko bhi install kar liya hai isme

fir "tsc" jo jo typescript ka compiler hai usko bhi install kar liya hai

npm tsc --init


//to remove node modules or other faltu files

"git rm -r --cached .
git add .
git commit -m "remove gitignore files"
git push" 


//why add eslint

npm init @eslint/config 

eslint ko pata hota hai ki kosni bad pratice use hui hai code mein 
isko fix karne mein help krta hai toh include every time in evry project


// express setup

express ko alag se src mein banana is a good practice kyuki ye jo hai 
sirf app.ts mein app banane ka kaam hoga na ki server ko chlanae ka kaam hoga 
isse readeablity bhadegi and isse humko pata chalega ki konsa file
kya kaam kar raha hai


used to give the differetiation between the production and the 
development part so hum develoment mein "err.stack" bhej ke saara error padh sakte hai
ki kisme kya error aaya hai baaki isko env mein store kardo mast.

errorStack: config .env ==="development" ? err.stack: "" , 

NODE_ENV=development 
//PRODUCTION LIKHENGE AGAR PRODUCTION HUA TOH


//way of throwing errors in js using http errors pacakge
import { HttpError } from 'http-errors
    const error = createHttpError(400,"Not Found");
throw error;